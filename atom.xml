<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://cielavenir.github.io/atom.xml" rel="self"/>
  <link href="http://cielavenir.github.io/"/>
  <updated>2018-07-05T02:26:36+09:00</updated>
  <id>http://cielavenir.github.io/</id>
  <author>
    <name><![CDATA[Ciel Avenir]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Personal Stuff]]></title>
    <link href="http://cielavenir.github.io/blog/2038/01/01/personal-stuff/"/>
    <updated>2038-01-01T00:00:00+09:00</updated>
    <id>http://cielavenir.github.io/blog/2038/01/01/personal-stuff</id>
    <content type="html"><![CDATA[<h3>Twitter</h3>

<ul>
<li><a href="https://twitter.com/cielavenir">https://twitter.com/cielavenir</a></li>
<li><a href="http://twilog.org/cielavenir">http://twilog.org/cielavenir</a></li>
<li><a href="http://twisave.com/cielavenir">http://twisave.com/cielavenir</a></li>
<li><a href="http://tweez.net/cielavenir">http://tweez.net/cielavenir</a></li>
</ul>


<h3>Accounts</h3>

<ul>
<li><a href="https://github.com/cielavenir">https://github.com/cielavenir</a></li>
<li><a href="https://rubygems.org/profiles/cielavenir">https://rubygems.org/profiles/cielavenir</a></li>
<li><a href="http://qiita.com/cielavenir">http://qiita.com/cielavenir</a></li>
<li><a href="https://forkwell.com/u/cielavenir/">https://forkwell.com/u/cielavenir/</a></li>
<li><a href="http://www.programmerprofile.net/user/cielavenir/">http://www.programmerprofile.net/user/cielavenir/</a></li>
<li><a href="https://stargzr.net/users/cielavenir">https://stargzr.net/users/cielavenir</a></li>
<li><a href="http://togetter.com/id/cielavenir">http://togetter.com/id/cielavenir</a></li>
<li><a href="https://www.instagram.com/cielartisan/">https://www.instagram.com/cielartisan/</a></li>
</ul>


<h3>巡拝</h3>

<ul>
<li>2015/01 関東三十六不動尊結願</li>
<li>2015/04 江戸三十三観音満願</li>
</ul>


<h3>資格等</h3>

<ul>
<li>英検2級</li>
<li>漢検2級</li>
<li>文検4級</li>
<li>普通自動車AT</li>
<li>Master of Integrated Biosciences</li>
<li><p>日本バイオインフォマティクス学会認定バイオインフォマティクス技術者</p></li>
<li><p>以下は受験料が無料だった時に適当に取ったので誇ることもない。</p>

<ul>
<li>Yahooデジカメエキスパート1級</li>
<li>Yahooタイピングエキスパート6級</li>
<li>(日本将棋連盟)将棋1級</li>
</ul>
</li>
</ul>


<h3>CodeIQ出題</h3>

<ul>
<li><a href="https://github.com/cielavenir/codeiq_problems">https://github.com/cielavenir/codeiq_problems</a>

<ul>
<li>Restricted Words (Hello World)は挑戦者数542人を記録。</li>
<li>Restricted Base32は少し残念。。</li>
</ul>
</li>
</ul>


<h3>CheckiO</h3>

<ul>
<li>(コーディング道場) The Same Gmail

<ul>
<li>Gmailの性質理解してますかって問題。悪問だったので他所では没になりました。</li>
</ul>
</li>
<li><a href="http://www.checkio.org/mission/painting-wall/share/8a0e0061de3ff95664776d904d309e57/">http://www.checkio.org/mission/painting-wall/share/8a0e0061de3ff95664776d904d309e57/</a>

<ul>
<li>当時は純粋なアルゴリズム問題は出したくないということでこっちに出した経緯。

<ul>
<li>ちなみに、今もモーニングクエスト枠(とRestricted)以外ではアルゴリズム問題は出していないです。</li>
</ul>
</li>
</ul>
</li>
<li><a href="http://www.checkio.org/mission/rotate-hole/share/ad54904cae112ddc65fa37533c5b0c1e/">http://www.checkio.org/mission/rotate-hole/share/ad54904cae112ddc65fa37533c5b0c1e/</a>

<ul>
<li>あれの設定を簡単にしてアルゴリズム部分だけを取り出した問題。</li>
</ul>
</li>
<li><a href="http://www.checkio.org/mission/exec-quine/share/2f386036b01111d06befa6820f2c2c5e/">http://www.checkio.org/mission/exec-quine/share/2f386036b01111d06befa6820f2c2c5e/</a>

<ul>
<li>Quineを書かせる問題はたくさんあるけど、CheckiOのシステム用にアレンジしてみたら面白そうな感じになった。</li>
</ul>
</li>
<li><a href="http://www.checkio.org/mission/fibonacci-golf/share/8e02b24099a9e339b86e73e4f4360524/">http://www.checkio.org/mission/fibonacci-golf/share/8e02b24099a9e339b86e73e4f4360524/</a>

<ul>
<li><a href="https://github.com/cielavenir/checkio-task-fibonacci-golf/blob/master/local_checker.py">https://github.com/cielavenir/checkio-task-fibonacci-golf/blob/master/local_checker.py</a></li>
<li><a href="https://github.com/cielavenir/checkio-task-fibonacci-golf/blob/master/local_checker.rb">https://github.com/cielavenir/checkio-task-fibonacci-golf/blob/master/local_checker.rb</a></li>
<li>(つまり、コンパイル後のサイズ)を使った問題をCodeIQで出したら面白いだろうなと思ったのだけど、一部から非難轟々になる恐れがあったのでやめた問題。</li>
</ul>
</li>
<li><a href="http://www.checkio.org/mission/adfgvx-cipher/share/558141829caa7987d18d95cd9f68ba9b/">http://www.checkio.org/mission/adfgvx-cipher/share/558141829caa7987d18d95cd9f68ba9b/</a>

<ul>
<li>暗号祭りに合わせて作った問題。ちなみに某所の暗号解読問題をアレンジして作ったので原案は私ではない。</li>
</ul>
</li>
</ul>


<h3>競技プログラミング等</h3>

<table>
<thead>
<tr>
<th style="text-align:left;">Judge</th>
<th style="text-align:left;">Rate</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">TopCoder</td>
<td style="text-align:left;">1016 (緑のまま引退の危機)</td>
</tr>
<tr>
<td style="text-align:left;">Codeforces</td>
<td style="text-align:left;">1666 (青が1600-1899になったので引退しました)</td>
</tr>
<tr>
<td style="text-align:left;">HackerRank</td>
<td style="text-align:left;">2303</td>
</tr>
<tr>
<td style="text-align:left;">AtCoder</td>
<td style="text-align:left;">1800程度</td>
</tr>
<tr>
<td style="text-align:left;">yukicoder</td>
<td style="text-align:left;">Lv 73</td>
</tr>
<tr>
<td style="text-align:left;">AOJ</td>
<td style="text-align:left;">658問</td>
</tr>
<tr>
<td style="text-align:left;">POJ</td>
<td style="text-align:left;">275問</td>
</tr>
<tr>
<td style="text-align:left;">CodeIQ</td>
<td style="text-align:left;">バッジ数・スキルピース数トップ</td>
</tr>
<tr>
<td style="text-align:left;">paiza</td>
<td style="text-align:left;">paizaマスター、言語マスター</td>
</tr>
<tr>
<td style="text-align:left;">CheckiO</td>
<td style="text-align:left;">全問解答</td>
</tr>
<tr>
<td style="text-align:left;">8946</td>
<td style="text-align:left;">残3問</td>
</tr>
</tbody>
</table>


<table>
<thead>
<tr>
<th style="text-align:left;">(少なくとも表彰式が)オンサイトの大会</th>
<th style="text-align:left;">(成績)</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">RProcon 2013</td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">CodeSCORE 2014</td>
<td style="text-align:left;">本選単独満点・優勝/50</td>
</tr>
<tr>
<td style="text-align:left;">Code Formula 2014</td>
<td style="text-align:left;">本選36位(銀賞)/100</td>
</tr>
<tr>
<td style="text-align:left;">CODE FESTIVAL 2014</td>
<td style="text-align:left;">112位/200、あさプロ Middle23位(銀賞)/100</td>
</tr>
<tr>
<td style="text-align:left;">Data League 2014</td>
<td style="text-align:left;">本選17位/18</td>
</tr>
<tr>
<td style="text-align:left;">Code Runner 2014</td>
<td style="text-align:left;">本選19位/100</td>
</tr>
<tr>
<td style="text-align:left;">CODE FESTIVAL 2015</td>
<td style="text-align:left;">116位/200、あさプロ Easy7位(入賞)/100 Middle77位/70+α</td>
</tr>
<tr>
<td style="text-align:left;">Data League 2015</td>
<td style="text-align:left;">12位/46</td>
</tr>
<tr>
<td style="text-align:left;">Code Runner 2015</td>
<td style="text-align:left;">本選33位/100</td>
</tr>
<tr>
<td style="text-align:left;">CODE FESTIVAL 2016</td>
<td style="text-align:left;">84位/220、Elimination Tournament Round3進出</td>
</tr>
<tr>
<td style="text-align:left;">BattleConferenceU30 2018</td>
<td style="text-align:left;">プログラミングバトル 本選5位/80</td>
</tr>
</tbody>
</table>


<h3>音楽ゲーム</h3>

<table>
<thead>
<tr>
<th style="text-align:left;">ゲーム</th>
<th style="text-align:left;">ID</th>
<th style="text-align:left;">成績</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">[TAITO]</td>
<td style="text-align:left;"></td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">グルーヴコースター</td>
<td style="text-align:left;">AC：asn66m4n</td>
<td style="text-align:left;">CS(Android)：約2000位。(機種変更回数の上限を知り絶望)ほぼ引退。<br><a href="https://docs.google.com/spreadsheets/d/1mNx4Ea36CaSmYRqGyX0oRftIBVuUlOVQbtaacQbpYHc/edit?usp=sharing">AC：500位台。Perfect6、S++51</a> <a href="http://gc.kt-flcl.com/spread/">※</a></td>
</tr>
<tr>
<td style="text-align:left;">[SEGA]</td>
<td style="text-align:left;"></td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">maimai</td>
<td style="text-align:left;"></td>
<td style="text-align:left;"><a href="http://maimai-log.net/view/cielavenir">9.25</a></td>
</tr>
<tr>
<td style="text-align:left;">chunithm</td>
<td style="text-align:left;">2037702683463</td>
<td style="text-align:left;"><a href="http://chuniviewer.net/rate?user=ciel"><strong>13.07</strong></a></td>
</tr>
<tr>
<td style="text-align:left;">DIVA</td>
<td style="text-align:left;">CWAAQK79AD</td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">[BNEI]</td>
<td style="text-align:left;"></td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">太鼓の達人</td>
<td style="text-align:left;"><a href="http://donderhiroba.jp/user_profile.php?taiko_no=532629126552">532629126552</a></td>
<td style="text-align:left;">モモイロ初級(苦笑)</td>
</tr>
<tr>
<td style="text-align:left;">シンクロニカ</td>
<td style="text-align:left;"><a href="https://lounge.synchronica.jp/Friend/info/46fade365cce05f806f0445be25bfd761acb2400">46fade365cce05f806f0445be25bfd761acb2400</a> <a href="http://cielavenir.github.io/blog/2015/07/19/synchronica-id/">※</a></td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">[CAPCOM]</td>
<td style="text-align:left;"></td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">crossbeats</td>
<td style="text-align:left;">51486150</td>
<td style="text-align:left;"><a href="http://cxbrank.maplia.jp/view/00652">2018/2 RP1750達成</a></td>
</tr>
<tr>
<td style="text-align:left;">crossbeats REV.</td>
<td style="text-align:left;"><a href="https://rev-srw.ac.capcom.jp/profile/76435928">76435928</a></td>
<td style="text-align:left;"><a href="https://revrank.maplia.jp/sunrise/view/00057">Class III RP1473.03</a></td>
</tr>
<tr>
<td style="text-align:left;">[KONAMI]</td>
<td style="text-align:left;"></td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">jubeat saucer</td>
<td style="text-align:left;">57710108066051</td>
<td style="text-align:left;">3.50</td>
</tr>
<tr>
<td style="text-align:left;">jubeat prop</td>
<td style="text-align:left;">60930017972907</td>
<td style="text-align:left;"><a href="http://cycr.net/jubeat/prop/data.php?id=60930017972907&amp;sort=jubility">Step 15</a></td>
</tr>
<tr>
<td style="text-align:left;">jubeat qubell</td>
<td style="text-align:left;">60930007106643</td>
<td style="text-align:left;"><a href="http://cycr.net/jubeat/qubell/data.php?id=60930007106643&amp;sort=jubility&amp;jblt=1">Stage 5クリア</a></td>
</tr>
<tr>
<td style="text-align:left;">jubeat clan</td>
<td style="text-align:left;">60930002044801</td>
<td style="text-align:left;">7.15</td>
</tr>
<tr>
<td style="text-align:left;">Reflec Beat</td>
<td style="text-align:left;">RB-6564-2108</td>
<td style="text-align:left;">VOLZZA CLASS 8</td>
</tr>
<tr>
<td style="text-align:left;">DDR</td>
<td style="text-align:left;">41242214</td>
<td style="text-align:left;">Enjoy LV 18</td>
</tr>
<tr>
<td style="text-align:left;">弐寺</td>
<td style="text-align:left;">3492-2945</td>
<td style="text-align:left;">(pendual) SP7級、step up ED1</td>
</tr>
<tr>
<td style="text-align:left;">pop'n</td>
<td style="text-align:left;">4392-2014-5346</td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">BeatStream</td>
<td style="text-align:left;"></td>
<td style="text-align:left;">Beast <strong>Rank9</strong></td>
</tr>
<tr>
<td style="text-align:left;">SDVX</td>
<td style="text-align:left;">SV-2080-7171</td>
<td style="text-align:left;">HH 岳翔</td>
</tr>
<tr>
<td style="text-align:left;">museca</td>
<td style="text-align:left;"></td>
<td style="text-align:left;">Curator Rank12</td>
</tr>
<tr>
<td style="text-align:left;">DanceRush</td>
<td style="text-align:left;"></td>
<td style="text-align:left;">Impress常駐</td>
</tr>
<tr>
<td style="text-align:left;">GD</td>
<td style="text-align:left;">0009ee6234</td>
<td style="text-align:left;">iOSは1600取って放置、ACは引き継ぎだけした(スキルポイント引き継がれないの…？)</td>
</tr>
<tr>
<td style="text-align:left;">[他]</td>
<td style="text-align:left;"></td>
<td></td>
</tr>
<tr>
<td style="text-align:left;">ちくたくコンチェルト</td>
<td style="text-align:left;">0364886461</td>
<td style="text-align:left;">exc125</td>
</tr>
<tr>
<td style="text-align:left;">はちはち</td>
<td style="text-align:left;"></td>
<td style="text-align:left;">(削除済)</td>
</tr>
</tbody>
</table>


<h3>作ったもの</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"></th>
<th style="text-align:left;">URL</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">cTouch</td>
<td style="text-align:left;"><a href="https://github.com/cielavenir/ctouch/">https://github.com/cielavenir/ctouch/</a><br><a href="https://sourceforge.net/projects/ctouch/">https://sourceforge.net/projects/ctouch/</a></td>
</tr>
<tr>
<td style="text-align:left;">picrawler</td>
<td style="text-align:left;"><a href="https://github.com/cielavenir/picrawler/">https://github.com/cielavenir/picrawler/</a></td>
</tr>
<tr>
<td style="text-align:left;">R on iOS</td>
<td style="text-align:left;">(記入時点でrwikiが落ちている…何たること…)<br><a href="http://rwiki.sciviews.org/doku.php?id=getting-started:installation:iphone">http://rwiki.sciviews.org/doku.php?id=getting-started:installation:iphone</a></td>
</tr>
<tr>
<td style="text-align:left;">R on Android</td>
<td style="text-align:left;"><a href="http://rwiki.sciviews.org/doku.php?id=getting-started:installation:android">http://rwiki.sciviews.org/doku.php?id=getting-started:installation:android</a></td>
</tr>
<tr>
<td style="text-align:left;">Google TwoFactor Authenticator on PSP</td>
<td style="text-align:left;"><a href="http://qiita.com/cielavenir/items/a13215069306eeaa24bf">http://qiita.com/cielavenir/items/a13215069306eeaa24bf</a></td>
</tr>
<tr>
<td style="text-align:left;">qinstall</td>
<td style="text-align:left;"><a href="https://github.com/cielavenir/qinstall">https://github.com/cielavenir/qinstall</a></td>
</tr>
<tr>
<td style="text-align:left;">Ruby multisax</td>
<td style="text-align:left;"><a href="https://github.com/cielavenir/ruby-chan">https://github.com/cielavenir/ruby-chan</a><br><a href="https://github.com/cielavenir/mruby-chan">https://github.com/cielavenir/mruby-chan</a></td>
</tr>
<tr>
<td style="text-align:left;">Ruby chan (bidirectional iterator)</td>
<td style="text-align:left;"><a href="https://github.com/cielavenir/multisax">https://github.com/cielavenir/multisax</a></td>
</tr>
<tr>
<td style="text-align:left;">gyao_url_another.rb</td>
<td style="text-align:left;"><a href="https://gist.github.com/cielavenir/a858255c4009ecbb9b67">https://gist.github.com/cielavenir/a858255c4009ecbb9b67</a></td>
</tr>
<tr>
<td style="text-align:left;">install_npapi.sh/install_ppapi.sh (OSX Flash)</td>
<td style="text-align:left;"><a href="https://github.com/cielavenir/flashupdate">https://github.com/cielavenir/flashupdate</a></td>
</tr>
</tbody>
</table>


<h3>発見したバグ</h3>

<ul>
<li>mdbtools

<ul>
<li>ODBCドライバにおいて、(MicrosoftAccessと違い)DBQ引数が取れない</li>
<li>ODBCドライバでマルチバイト文字列が扱えない</li>
</ul>
</li>
<li>ExGame (モバゲーのFlashランタイム)

<ul>
<li>Android Chrome/iOS6で文字が表示できない</li>
</ul>
</li>
<li>RVM

<ul>
<li>古いMac(本来i386だがboot.efiハックでx86_64化が可能なモデル)をMountain Lionにアップデートした時に、カーネルがx86_64に切り替わるが、libyaml.dylibがi386のまま正しく読み込まれず、x86_64用にリビルドもされない</li>
</ul>
</li>
<li>Google Chrome

<ul>
<li>filesystem APIのクオータ要求時に警告バーが出るが、この要求を機能拡張のポップアップ画面内で行うと警告バーが出る代わりに(親ごと)クラッシュする</li>
</ul>
</li>
<li>嫁コレ

<ul>
<li>APIトークンにIMEIをハッシュではなく暗号化したものを用いているため、嫁コレサーバー側で生IMEIを取り出すことができる。一部通信はHTTPで行われているため盗聴も可能である</li>
<li>3.4.xで修正された</li>
</ul>
</li>
<li>東京100ガイド

<ul>
<li>WiMAX環境で使用できない</li>
<li>修正済み</li>
</ul>
</li>
</ul>


<h3>イラスト</h3>

<ul>
<li>deviantART (私のtwitterアイコン原画等。限定公開)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[AOJ] 知識の証明]]></title>
    <link href="http://cielavenir.github.io/blog/2018/07/05/proof-of-knowledge/"/>
    <updated>2018-07-05T01:50:00+09:00</updated>
    <id>http://cielavenir.github.io/blog/2018/07/05/proof-of-knowledge</id>
    <content type="html"><![CDATA[<p><a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2883">http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2883</a></p>

<p>構文解析とは何だったのか。</p>

<h2>解法</h2>

<ul>
<li>例として<code>[+c[+a[^bd]]]</code>を<code>O[c][O[a][X[b][d]]]</code>に変換します。</li>
<li>O、A、Xはそれぞれ2引数を取りor、and、xorするProcで、カリー化されています。</li>
<li>変換された文字列は正しいプログラムなので、evalでバッチリです＾＾</li>
</ul>


<h2>Python</h2>

<ul>
<li>Pythonはfunctools.partialはありますが演算子の形でカリー化することができないので、自前で関数をネストしてカリー化を行います。</li>
<li>なおPythonはRubyのProcで必要な特別扱いが必要ないので、括弧は丸括弧を使います。</li>
<li>(ところで答案内のtranslateのインポート方法に癖がありますが、Py2/3対応にするにはやむを得ないものです。)</li>
</ul>


<h2>解答例</h2>

<ul>
<li>Ruby <a href="http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=2998020">http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=2998020</a></li>
<li>Python(2/3) <a href="http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=2998054">http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=2998054</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[yukicoder] 中央値を求めよ LIMITED]]></title>
    <link href="http://cielavenir.github.io/blog/2018/06/18/median/"/>
    <updated>2018-06-18T00:30:00+09:00</updated>
    <id>http://cielavenir.github.io/blog/2018/06/18/median</id>
    <content type="html"><![CDATA[<p><a href="https://yukicoder.me/problems/no/702">https://yukicoder.me/problems/no/702</a></p>

<h2>解法</h2>

<ul>
<li>一様分布なので、中央付近以外は捨てる方法で解けます。</li>
<li>ただしqsortはstd::sortよりメモリを若干多く使うため、C言語で解く場合は閾値に注意する必要があります。</li>
</ul>


<h2>解答例</h2>

<ul>
<li>C <a href="https://yukicoder.me/submissions/266771">https://yukicoder.me/submissions/266771</a></li>
<li>C++ <a href="https://yukicoder.me/submissions/266775">https://yukicoder.me/submissions/266775</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[yukicoder] ペアでチームを作ろう]]></title>
    <link href="http://cielavenir.github.io/blog/2018/06/10/pair-team/"/>
    <updated>2018-06-10T02:00:00+09:00</updated>
    <id>http://cielavenir.github.io/blog/2018/06/10/pair-team</id>
    <content type="html"><![CDATA[<p><a href="https://yukicoder.me/problems/no/698">https://yukicoder.me/problems/no/698</a></p>

<h2>解法</h2>

<ul>
<li>bitDPを使うのが一般的な解法ですが、計算量が増えるものの、next_partial_permutationを使うこともできます。</li>
<li>標準関数ではありませんが、<code>next_permutation(v.begin(), v.end())</code>する直前に<code>reverse(v.begin()+middle, v.end())</code>するだけなので、(next_combinationと違って)インラインで組み込むのは簡単です。</li>
<li><code>v.begin()</code>から<code>v.begin()+middle</code>までを(<code>middle P size</code>の)部分順列として使います。</li>
<li>ただし、ループが回るたびに、<code>v.begin()+middle</code>から<code>v.end()</code>まではソートされていることが保証されています。この性質を利用することで、vからsize-middle個選んでから残りのmiddle個を総当たりしたのと同じことになるのです。</li>
<li>ループ回数は14P7 = 17297280回です。</li>
</ul>


<h2>解答例</h2>

<ul>
<li>C++ <a href="https://yukicoder.me/submissions/264420">https://yukicoder.me/submissions/264420</a></li>
<li>cLay <a href="https://yukicoder.me/submissions/264422">https://yukicoder.me/submissions/264422</a></li>
</ul>


<h2>チームを作ろう２</h2>

<ul>
<li>この解法であればこちらもループ内の加算とxorを入れ替えるだけで容易に解くことができます。</li>
<li>cLay <a href="https://yukicoder.me/submissions/265093">https://yukicoder.me/submissions/265093</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[atcoder] Five, Five Everywhere]]></title>
    <link href="http://cielavenir.github.io/blog/2018/05/06/five/"/>
    <updated>2018-05-06T02:00:00+09:00</updated>
    <id>http://cielavenir.github.io/blog/2018/05/06/five</id>
    <content type="html"><![CDATA[<p><a href="https://abc096.contest.atcoder.jp/tasks/abc096_d">https://abc096.contest.atcoder.jp/tasks/abc096_d</a></p>

<h2>出力</h2>

<ul>
<li>AGC001以降のAtCoderでは、区切りは空白区切り改行区切りのどちらでも構いません(trailing spaceも可)。</li>
<li>よって<code>puts arr*' '</code>は<code>puts arr</code>、ひいては<code>p *arr</code>でokです。以下では後者を使います。</li>
</ul>


<h2>解法</h2>

<ul>
<li>5で割ってあまりが1になる整数の集合から5個選んだ合計は5で割り切れます。</li>
<li>素数を列挙していき、1の位が1であるものをN個拾えば良いです。

<ul>
<li>実際には1の位は(統一していれば)1,3,7,9のいずれも大丈夫です。以下の答案では9を採用しています。</li>
<li>64bytes</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span><span class="s1">&#39;prime&#39;</span><span class="p">;</span><span class="nb">p</span> <span class="o">*</span><span class="no">Prime</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="mi">1499</span><span class="p">)</span><span class="o">.</span><span class="n">select</span><span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span><span class="n">e</span><span class="o">%</span><span class="mi">5</span><span class="o">&gt;</span><span class="mi">3</span><span class="p">}</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>1の位がX(奇数、以下の答案では3)である整数を全て列挙し、素数をN個拾うようにすると以下のようになります。</li>
<li>62bytes</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">require</span><span class="s1">&#39;prime&#39;</span><span class="p">;</span><span class="nb">p</span> <span class="o">*</span><span class="mi">3</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">1499</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">select</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:prime?</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>フェルマーテスト</h3>

<ul>
<li><code>require'prime'</code>をカットすることで字数の節約にはなりますが、<code>Integer#prime?</code>は使えなくなるので、別の素数判定が必要になります。そこで、フェルマーテストを用います。</li>
<li>[1]に載っている式、<code>2**i%i==2</code>を使います。なおこの素数判定の場合stepの初期値を1にすることはできなくなるので注意してください(3,7,9は可)。</li>
<li>51bytes</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="nb">p</span> <span class="o">*</span><span class="mi">3</span><span class="o">.</span><span class="n">step</span><span class="p">(</span><span class="mi">1499</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span><span class="o">.</span><span class="n">select</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span><span class="mi">2</span><span class="o">**</span><span class="n">i</span><span class="o">%</span><span class="n">i</span><span class="o">==</span><span class="mi">2</span><span class="p">}</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span><span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>redo</h3>

<ul>
<li>[2]では、ループカウンタをインクリメントしないよう、条件を満たさない場合はredoを使っています。これはPerlだけでなくRubyでも有用なテクニックです。</li>
<li><a href="https://abc096.contest.atcoder.jp/submissions/2470406">https://abc096.contest.atcoder.jp/submissions/2470406</a> (最終答案)</li>
<li>46bytes</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">i</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="n">i</span><span class="o">+=</span><span class="mi">5</span><span class="p">;</span><span class="mi">2</span><span class="o">**</span><span class="n">i</span><span class="o">%</span><span class="n">i</span><span class="o">==</span><span class="mi">2</span><span class="o">?</span><span class="p">(</span><span class="nb">p</span> <span class="n">i</span><span class="p">)</span><span class="ss">:redo</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>discussion</h2>

<ul>
<li>フェルマーテストやredoの実践例を挙げることができました。どちらもゴルフには有用であると思われます。</li>
</ul>


<h2>reference</h2>

<ol>
<li>cojnaさん <a href="https://abc096.contest.atcoder.jp/submissions/2465874">https://abc096.contest.atcoder.jp/submissions/2465874</a></li>
<li>%20さん <a href="https://abc096.contest.atcoder.jp/submissions/2467541">https://abc096.contest.atcoder.jp/submissions/2467541</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[atcoder] Ball]]></title>
    <link href="http://cielavenir.github.io/blog/2018/04/21/ball/"/>
    <updated>2018-04-21T22:00:00+09:00</updated>
    <id>http://cielavenir.github.io/blog/2018/04/21/ball</id>
    <content type="html"><![CDATA[<p><a href="https://bcu30-2018.contest.atcoder.jp/tasks/bcu30_2018_a">https://bcu30-2018.contest.atcoder.jp/tasks/bcu30_2018_a</a></p>

<h2>概要</h2>

<p>(現状問題公開されてないですからね…)</p>

<p>1個ずつ数字が書かれた球がA個ある。これを1個ずつ数字が書かれたB個の球にしたい。ただし変換は以下の2種類。</p>

<ul>
<li>数xと数yが書かれた2個の球を数x * yが書かれた1個の球にする</li>
<li>数xが書かれた1個の球を、(x%y==0となるような適当なyを選んで)数yと数x / yが書かれた2個の球にする</li>
</ul>


<p>この条件で最終状態を達成できるか？AおよびBは9以下、書かれている数はそれぞれ100以下。</p>

<h2>解法</h2>

<ul>
<li>探索…は必要ないです。乗算と余りのない除算のみで構成されるということは、素因数です。素因数の組が等しい…つまり、状態Aの数の積と状態Bの数の積が等しければYesです。</li>
<li>多分、制約は、積がint64に収まるようにってことなんだと思う。</li>
</ul>


<h2>感想</h2>

<ul>
<li>気づきづらい。</li>
<li>本当は「積が等しいかどうか判定せよ」という問題だったけど、がち勢が多かったので難しくしたらしい。</li>
<li>おかげで体感300点ぐらいでした…つらいよぅorz</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[atcoder] くるくる寿司]]></title>
    <link href="http://cielavenir.github.io/blog/2018/03/10/conveyor-sushi/"/>
    <updated>2018-03-10T22:16:50+09:00</updated>
    <id>http://cielavenir.github.io/blog/2018/03/10/conveyor-sushi</id>
    <content type="html"><![CDATA[<h2>概要</h2>

<ul>
<li>N(=3000)枚の寿司ネタ(a-zの26種類)を連続して流す(文字列Sとする)。</li>
<li>その中からM(=7)枚の部分列がQ(=30000)個問い合わせられる。ただし場合により部分列は連続していないことがある。</li>
<li>そのそれぞれに対し、S上でのインデックスを答える。</li>
</ul>


<h2>決定的アルゴリズム</h2>

<p>この問題、D=1とすれば、部分列は連続であることが保証されます。つまり、決定的アルゴリズムを使うことができます。</p>

<ul>
<li>N枚のうちで連続したM枚についてすべて異なるようにSを生成します。

<ul>
<li>完全に決定的にするには <a href="https://en.wikipedia.org/wiki/De_Bruijn_sequence">https://en.wikipedia.org/wiki/De_Bruijn_sequence</a> とか使うんですが、発展のために少しでもエントロピーを上げたいので、この部分は乱択を使って良いと思います。</li>
</ul>
</li>
<li>すべて異なることがわかっているのだから、M枚の部分文字列を単にSから探すだけで終わりです。</li>
<li><p>Sの生成さえできれば、1ケースに付き30000点、 <strong>合計300000点を確実に獲得できます。</strong></p></li>
<li><p>Rubyの事実上初版 <a href="https://rco-contest-2018-final-open.contest.atcoder.jp/submissions/2177816">https://rco-contest-2018-final-open.contest.atcoder.jp/submissions/2177816</a></p></li>
</ul>


<h2>発展</h2>

<ul>
<li>この状態であれば、0..Nのそれぞれ(j)に対し、qがS[j,M*3]中にこの順番で入っている数(ただしSの先頭に入っているほど重みを大きくする)が最大となるjをインデックスとして答える実装にすることで、D=2.5程度までは安定してインデックスを求めることができます。

<ul>
<li>「*3」は、元となる部分文字列の長さはM*3以下であることを期待しています。</li>
</ul>
</li>
<li><p>この「重み」が評価関数の肝になると思うのですが、調整の余地が残っている気がします。</p></li>
<li><p>C++の(コンテスト後)最終版(381792点) <a href="https://rco-contest-2018-final-open.contest.atcoder.jp/submissions/2179945">https://rco-contest-2018-final-open.contest.atcoder.jp/submissions/2179945</a></p></li>
<li><p>なお、コンテスト中は元となる部分文字列の長さがMであり、qの長さがM未満になりうると誤読していました、D=1.5にしかできなかったので324730点どまりでした。無念。</p></li>
</ul>


<h2>記事としての結論</h2>

<ul>
<li>順位表で、ある点数を取っている人が沢山いる場合は決定的アルゴリズムを疑うのは有用ではないかと思います。</li>
</ul>


<h2>補足</h2>

<ul>
<li>Sの一例は次のとおりです：</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kzsbqmuxtqwazgonugucjaouqsihsmgjpvdiwscfaewltvsyolgoenjcmlylyzhqlhgaypshugqlrqfxjigsliujfconzsyrnctoeztichmtznzxfhfkcpytpenkyqxmwxeaihahytbkbqkzxplhdtnzbsnpwhdpzjykrgwoxihvkiqrgmruztplaiuqecvbrvlbkwsbylxgxytyhsyiedtfvkjiylnjmcmhvtlkrmqbafrhngsqrvfbkadbkjshyhbagjoyhqmwipzegzqjkpxoquezkdplxombjqkdtbgnghkdaregkmrxelhpfbfoewbnfewmqvyivwkhfahoryxqvqnoguwpcldzcqlbpfruijrenfofeajcnrtcnqlzhbwdxwglmbkhdfhdyhfinxkwksypafghuoilqofnmbiavcqtjszdtowlqsdienoymvlrhczlysmlokhbvluaelotziotdtcwnvsigjnfjfywkeyalcmxgwyojkjrigvlnoqehmgopgvhntqxvnmxobebiwbzomjracdoerdndvbdygoyeayujwhtoiouxhmdbqusqbmqwnucgbzligimgnaswqbcdjchomvihdwmksltueulypyjsrnjeyoipdfxtveurkuwxatwmawmvrahsgexunjrdzemesmkfxmdzjvqxijdqoabvahbzeklborztczqlicyzbpemqinofcfuvaznakgxaevhcmqgmnescpxghixypxsxcxcqsqpkldvycwkxhkqcwqlqxnpoazsohnoucsztqdizbntfdeteiximtuymuzodlquigwhzoqjezyqahpkifvbyhkibmhslzdwybpojuegpyopwcdigpepmgpgdgdlumhrnfscleimrhriyjxfypdawcybayotfguipljmjvzxixpxugnlzvqemwluzwskegvpmpvrftyrfegxwetstcouotmofsakluqdmliroqiaodhrbvxnqgwrqntenstlhykhjalzlwuqvcmwawfyqojhpymlgycsxyhgqxjvesdbifgxitdikicrtnuzywysuvxrsidvtwisowtvltfyvmeqdpnzhklcvxmygjzmtpfqzezwkgiwfdctpchqfljqenqbxhxuivldilsldfesvtebuxcpqsharzikqnvxudumxqlknkpblcicqjimafnaqbocjmguzcliduealstwhnyqcbypexcnyjndbwgvefjwlbzilcqejkylrwqmbzsxolbvuihmkvyjlwkitvthxsmozyektmnhxifxziytweudfnhipwstdzwqcekmuswolxrvwagpfhlgwqhqsgocwioykxpnlkpcjtzdfwfxnfrdjnpkmfkninbsmpdblqveasiejnqxthdioxfpruxabcjftnkgdphravwvzlcgtonqcftlckmvmxvhojwuzpetwyhzvcrgclxembtiksgkxrnwhpamnrcztbftknzijgsrxwnfxrzhacvfakjapavrbrmdacqhurnqozroebwnqjgmcnpdwkrhzwbrusawknwyglczmewansanujgkljlntcbxeqtuczwnsvawpgkzkzqnruqbnuoepfxylqmqfodorsrlyuhoxtgxqizpzokjqskcapuoctghnhsprjgyayidqelwfaufxvpcqgtbvgltgbrbmtawovsdvsnmjymqdtkjeptmhmcjenmwktbnvmqnjyuceclnpeqktpdhclyvwbszlqlvzbahuktlwyzphaoaftshmvelbhvbqyfatbjmknybdnpjpxtovwodvxzdapgwbekptxputuqwsfrcqyauvegdfcjsjudqnqiqsfzeoevlkdczpkwejcfekodqdcpzqsjfhgkovcjzhtnyosceiknalxljzpcsnqnpvigrmblkflihbrireolvlpmyunynuemvfkmyhryqvwcqrbnryjydnsusbesncslszxjpirhqxbfnsxlwsrbxurvjystorpmeiyxcmgynknfdlzqgatiyhmyfksjbcokchpbgxgjkiafsmzepbfmjzyntzcalnfufqlgqkwynmizavocyqijpuevsjdlvbwmycvepjzvhxznxlyhaeypicgiyfnxwasyukgmiwikmgtkvgwevafmkpnphuvczrjcgqewivjugpikduiofvaeshowxzcuxecemurqieiflobzxbxswciepxwfmhkevjxtngfxgckfvtztjyznqkyiymeauyvkdgspmzgxmxuoztrkpudrdowrysdcozcpbydsygxroclwhldqrzswnldbgjybwhrseljwmclgzabgpmthltqocahrzrnowgpcrzkazcyhxqdknlapzhjyhjsnejbnoeabjvdcxjkgcniokyxyjujkfmtgrxdvwpnbxficmzrbspvozlsmdoxdefbhgmfumuakdxdivrvzjfdngjqxutjeibzahvmktqjvryplivblnetnvukxjmvtgzidxhokfhicoaqvhpmwpoefwgqsznyczfetgnfqtwornmnslycqodunanvrzvtufmxdqubnqfbyzrwcmyteukdskmjhsijkhzqopckiobdabsyzujbxjnymiaroiwafpwbpihqnhlmxsopoxbqrfxhavgqurfpkgskntoavqdbfhqkfyspwmihrtesoemfnbwswyqutsaujcdkepdukawaigywzveizimplsnvalkgrgeuznvbxgeruhwoijvmcazucrvofdmvuqcsyejrmeyclsgafckhcdtpvlvymcvswgfzkphxbmgcdxzlxzqmdwocowclvwrspkurzjsbnxfxiatubjfriasfyxwdejpmsfvmfptijwykizxoubgetmbsogpwqwkqlsfxklopxpwjwrpizgqonplrpfpmqagnmcgcoqgemovxtxrkdnwqugvmyqetbiqchfcmpsunwjnuplmzwjplfj</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[yukicoder] テトラナッチ数列 (Hard)]]></title>
    <link href="http://cielavenir.github.io/blog/2018/03/03/tetranacci/"/>
    <updated>2018-03-03T02:00:00+09:00</updated>
    <id>http://cielavenir.github.io/blog/2018/03/03/tetranacci</id>
    <content type="html"><![CDATA[<p><a href="https://yukicoder.me/problems/no/658">https://yukicoder.me/problems/no/658</a></p>

<ul>
<li>周期性を使わなくても行列累乗で解けますが、問題のサイズが割と大きいのでコンパイル言語が必須になります。</li>
<li><p>yukicoderのCrystalには(AtCoderと違って)<a href="https://yukicoder.me/help/environments">&ndash;releaseがついていて</a>よかったね。</p></li>
<li><p><a href="https://yukicoder.me/submissions/226614">https://yukicoder.me/submissions/226614</a></p></li>
</ul>


<p>以上、解説というよりはコメンタリーでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[yukicoder] E869120 and Lucky Numbers]]></title>
    <link href="http://cielavenir.github.io/blog/2018/02/24/luckynumber/"/>
    <updated>2018-02-24T00:39:40+09:00</updated>
    <id>http://cielavenir.github.io/blog/2018/02/24/luckynumber</id>
    <content type="html"><![CDATA[<p>まず、最下位が0,6,7の場合はNoです。後述する状態1/0への移行は十の位以降で発生する必要があります。in06がこのケースです。</p>

<p>それ以外の場合。
下の桁から順番に見ていきます。3つの状態があるので適切に管理します。</p>

<ul>
<li>状態2(私のソースコードに生えた数字ですが、まあ「2つのラッキーナンバーが影響している」とでも考えて下さい)のとき、2,3,4,0,6,7を受け付けます。

<ul>
<li>2,3,4の場合は、繰り上がりがあるので、上の桁から1を引きます。

<ul>
<li>すでに最上位の場合はNoです。</li>
<li>(最上位でないが上位桁が0の場合、次の桁で弾かれるため、無理やり引いても通ります。)</li>
</ul>
</li>
<li>6,7の場合は、状態1に移行します。</li>
<li>0の場合は、状態0に移行します。</li>
</ul>
</li>
<li>状態1のとき、0,6,7を受け付けます。

<ul>
<li>0の場合は、状態0に移行します。</li>
</ul>
</li>
<li>状態0のとき、0のみを受け付けます。

<ul>
<li>ラッキーナンバーが影響し得ないということは、すべての桁が0になっている以外にないです。</li>
<li>(間に合わなかった)チャレンジでは、612だと、下位の12で6+6と完結しているのに、新たな600が出てきているので、十の位が不合理となるのです。</li>
</ul>
</li>
</ul>


<p><a href="https://yukicoder.me/submissions/238472">https://yukicoder.me/submissions/238472</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[yukicoder] ここでちょっとQK！]]></title>
    <link href="http://cielavenir.github.io/blog/2018/02/10/qk/"/>
    <updated>2018-02-10T02:10:16+09:00</updated>
    <id>http://cielavenir.github.io/blog/2018/02/10/qk</id>
    <content type="html"><![CDATA[<p><a href="https://yukicoder.me/problems/no/649">https://yukicoder.me/problems/no/649</a></p>

<p>配列の先頭要素からの削除はO(配列長)ですが、dequeを使うと先頭からの削除は速くなります。
中央からの削除はやはり遅いですが、定数倍の高速化が望めるので、時間制限の設定によっては間に合う可能性があります。</p>

<ul>
<li><a href="https://yukicoder.me/submissions/235221">https://yukicoder.me/submissions/235221</a></li>
</ul>


<p>なお、マスと駒と色塗りで、範囲管理をvectorでなくdequeでやると通ってしまいます(setでやるのが最善ではあります)。
- <a href="http://cielavenir.github.io/blog/2015/10/29/many-ameba/">http://cielavenir.github.io/blog/2015/10/29/many-ameba/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[yukicoder] おやすみ]]></title>
    <link href="http://cielavenir.github.io/blog/2018/02/10/goodnight/"/>
    <updated>2018-02-10T02:00:16+09:00</updated>
    <id>http://cielavenir.github.io/blog/2018/02/10/goodnight</id>
    <content type="html"><![CDATA[<p><a href="https://yukicoder.me/problems/no/648">https://yukicoder.me/problems/no/648</a></p>

<p>基本的にはむこさんの解説のとおり、<code>(sqrt(8*n+1)-1)/2</code>を出力すれば良いですが、実装上の別解を。</p>

<ol>
<li>Integer sqrtの利用

<ul>
<li>sqrtの誤差が問題になるなら、整数での平方根をニュートン法などで計算すればよいでしょう。</li>
<li>ただし、(LLでないなら)128bit幅の整数が必要になるので注意。</li>
<li><a href="https://qiita.com/cielavenir/items/2a685d3080862f2c2c47">yhpg「多段階選抜」</a>の復習でライブラリを作っていました。

<ul>
<li>Ruby <a href="https://yukicoder.me/submissions/205380">https://yukicoder.me/submissions/205380</a></li>
<li>C <a href="https://yukicoder.me/submissions/205381">https://yukicoder.me/submissions/205381</a></li>
<li>Python <a href="https://yukicoder.me/submissions/207818">https://yukicoder.me/submissions/207818</a></li>
</ul>
</li>
</ul>
</li>
<li>sqrtlの利用

<ul>
<li>long doubleの仮数部が64bitであることを思い出せば、sqrtlを使えば解けることは想像に固くありません。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></li>
<li>C <a href="https://yukicoder.me/submissions/206063">https://yukicoder.me/submissions/206063</a></li>
<li>Python (ctypes) <a href="https://yukicoder.me/submissions/207816">https://yukicoder.me/submissions/207816</a>

<ul>
<li>intをマーシャリングするときにfloatを経由されるといけないので、sscanfを用いて自力でマーシャリングする必要があります</li>
</ul>
</li>
</ul>
</li>
</ol>

<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>あれ、topcoder初出場で撃沈したのは誰だ^^; (SRM 635 Div2 Medやらyukicoder No.413やら)<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[yukicoder] 旅館の予約計画]]></title>
    <link href="http://cielavenir.github.io/blog/2017/10/23/inn-reservation/"/>
    <updated>2017-10-23T02:00:00+09:00</updated>
    <id>http://cielavenir.github.io/blog/2017/10/23/inn-reservation</id>
    <content type="html"><![CDATA[<p><a href="https://yukicoder.me/problems/no/580">https://yukicoder.me/problems/no/580</a></p>

<ul>
<li>区間スケジューリング問題の、スロットが複数あるバージョンである。</li>
<li>基本的な解き方は同じだが、popするスロットは、「部屋iの(出)時刻がdata[i]の入時刻より早い中で最大」のものである。

<ul>
<li>このスロットを検索するには、multisetを2分探索する以上に効率のよい方法はなさそうである。

<ul>
<li>勿論普通の区間スケジューリングではこの集合は1個しか無いため定数時間である。</li>
</ul>
</li>
<li>私は最初、最小のものがdata[i]の入時刻より早ければpopする実装にして盛大に間違いました…</li>
</ul>
</li>
<li><p>スロットを線形探索しないため、計算量をnからlognに落とすことができ、合わせてO(m(logm+logn))となる(実際にはn&lt;mだと思われるのでO(mlogm))。</p></li>
<li><p><a href="https://yukicoder.me/submissions/211209">https://yukicoder.me/submissions/211209</a> (現状の最短時間とのこと)</p></li>
<li>n&lt;=10000, m&lt;=100000なるHardバージョンを作ろうと思いましたが必要ない気もするのでやめておきます。。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[atcoder] ConvexScore]]></title>
    <link href="http://cielavenir.github.io/blog/2017/09/03/convexscore/"/>
    <updated>2017-09-03T23:00:00+09:00</updated>
    <id>http://cielavenir.github.io/blog/2017/09/03/convexscore</id>
    <content type="html"><![CDATA[<p><a href="http://arc082.contest.atcoder.jp/tasks/arc082_c">http://arc082.contest.atcoder.jp/tasks/arc082_c</a></p>

<h2>初版</h2>

<ul>
<li>解説を見て書いたコードがどうも合わないのですぎむさんの答案( <a href="http://arc082.contest.atcoder.jp/submissions/1561350">http://arc082.contest.atcoder.jp/submissions/1561350</a> )と見比べながら合わせた答案。</li>
<li><p><del>解説にある「2点以上乗りうる直線」って線分じゃないですかね…。</del></p></li>
<li><p><a href="http://arc082.contest.atcoder.jp/submissions/1566591">http://arc082.contest.atcoder.jp/submissions/1566591</a></p></li>
<li>このバージョンは三角(不等)式を使うので誤差が激しくなる。long doubleが必須。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;complex&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">EPS</span> <span class="o">=</span> <span class="mf">1e-12</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">complex</span><span class="o">&lt;</span><span class="kt">long</span> <span class="kt">double</span><span class="o">&gt;</span> <span class="n">P</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="nl">L</span> <span class="p">:</span> <span class="k">public</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">P</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">L</span><span class="p">(</span><span class="k">const</span> <span class="n">P</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">P</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">push_back</span><span class="p">(</span><span class="n">a</span><span class="p">);</span> <span class="n">push_back</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kt">bool</span> <span class="nf">intersectSP</span><span class="p">(</span><span class="k">const</span> <span class="n">L</span> <span class="o">&amp;</span><span class="n">s</span><span class="p">,</span> <span class="k">const</span> <span class="n">P</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">abs</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="n">p</span><span class="p">)</span><span class="o">+</span><span class="n">abs</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">p</span><span class="p">)</span><span class="o">-</span><span class="n">abs</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">&lt;</span> <span class="n">EPS</span><span class="p">;</span> <span class="c1">// triangle inequality</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">long</span> <span class="kt">long</span> <span class="nf">pow_binary_mod</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">x</span><span class="p">,</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">y</span><span class="p">,</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">M</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">long</span> <span class="kt">long</span> <span class="n">z</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(;</span><span class="n">y</span><span class="p">;</span><span class="n">y</span><span class="o">&gt;&gt;=</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">((</span><span class="n">y</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span><span class="n">z</span><span class="o">=</span><span class="n">z</span><span class="o">*</span><span class="n">x</span><span class="o">%</span><span class="n">M</span><span class="p">;</span>
</span><span class='line'>      <span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="o">%</span><span class="n">M</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">z</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">M</span><span class="o">=</span><span class="mi">998244353</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>  <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="n">P</span><span class="o">&gt;</span><span class="n">v</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">r</span><span class="o">=</span><span class="n">pow_binary_mod</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">N</span><span class="p">,</span><span class="n">M</span><span class="p">);</span>
</span><span class='line'>  <span class="n">set</span><span class="o">&lt;</span><span class="n">L</span><span class="o">&gt;</span><span class="n">se</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">x</span><span class="p">,</span><span class="o">&amp;</span><span class="n">y</span><span class="p">),</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="p">{(</span><span class="kt">double</span><span class="p">)</span><span class="n">x</span><span class="p">,(</span><span class="kt">double</span><span class="p">)</span><span class="n">y</span><span class="p">};</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="n">L</span> <span class="n">l</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">v</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">k</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">k</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="n">k</span><span class="o">!=</span><span class="n">i</span><span class="o">&amp;&amp;</span><span class="n">k</span><span class="o">!=</span><span class="n">j</span><span class="o">&amp;&amp;</span><span class="n">intersectSP</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">v</span><span class="p">[</span><span class="n">k</span><span class="p">]))</span><span class="n">n</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">r</span><span class="o">=</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="n">pow_binary_mod</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">M</span><span class="p">))</span><span class="o">%</span><span class="n">M</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,((</span><span class="n">r</span><span class="o">-</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">M</span><span class="o">+</span><span class="n">M</span><span class="p">)</span><span class="o">%</span><span class="n">M</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>点が載っている判定を直線へ</h2>

<ul>
<li>1直線ごとに載っている点をすべてリストして、そこから線分を取り出す。</li>
<li><p>直線での判定なので、long doubleは必要ない。</p></li>
<li><p><a href="http://arc082.contest.atcoder.jp/submissions/1566594">http://arc082.contest.atcoder.jp/submissions/1566594</a></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;complex&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">EPS</span> <span class="o">=</span> <span class="mf">1e-12</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">complex</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">P</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">double</span> <span class="nf">cross</span><span class="p">(</span><span class="k">const</span> <span class="n">P</span><span class="o">&amp;</span> <span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">P</span><span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">imag</span><span class="p">(</span><span class="n">conj</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="o">*</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="nl">L</span> <span class="p">:</span> <span class="k">public</span> <span class="n">vector</span><span class="o">&lt;</span><span class="n">P</span><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">L</span><span class="p">(</span><span class="k">const</span> <span class="n">P</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">P</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">push_back</span><span class="p">(</span><span class="n">a</span><span class="p">);</span> <span class="n">push_back</span><span class="p">(</span><span class="n">b</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kt">bool</span> <span class="nf">intersectLP</span><span class="p">(</span><span class="k">const</span> <span class="n">L</span> <span class="o">&amp;</span><span class="n">l</span><span class="p">,</span> <span class="k">const</span> <span class="n">P</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">abs</span><span class="p">(</span><span class="n">cross</span><span class="p">(</span><span class="n">l</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">p</span><span class="p">,</span> <span class="n">l</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="n">p</span><span class="p">))</span> <span class="o">&lt;</span> <span class="n">EPS</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">long</span> <span class="kt">long</span> <span class="nf">pow_binary_mod</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">x</span><span class="p">,</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">y</span><span class="p">,</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">M</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">long</span> <span class="kt">long</span> <span class="n">z</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(;</span><span class="n">y</span><span class="p">;</span><span class="n">y</span><span class="o">&gt;&gt;=</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">((</span><span class="n">y</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span><span class="n">z</span><span class="o">=</span><span class="n">z</span><span class="o">*</span><span class="n">x</span><span class="o">%</span><span class="n">M</span><span class="p">;</span>
</span><span class='line'>      <span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="o">%</span><span class="n">M</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">z</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">M</span><span class="o">=</span><span class="mi">998244353</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>  <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="n">P</span><span class="o">&gt;</span><span class="n">v</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">r</span><span class="o">=</span><span class="n">pow_binary_mod</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">N</span><span class="p">,</span><span class="n">M</span><span class="p">);</span>
</span><span class='line'>  <span class="n">set</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span><span class="n">se</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">x</span><span class="p">,</span><span class="o">&amp;</span><span class="n">y</span><span class="p">),</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="p">{(</span><span class="kt">double</span><span class="p">)</span><span class="n">x</span><span class="p">,(</span><span class="kt">double</span><span class="p">)</span><span class="n">y</span><span class="p">};</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">se</span><span class="p">.</span><span class="n">find</span><span class="p">({</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">})</span><span class="o">!=</span><span class="n">se</span><span class="p">.</span><span class="n">end</span><span class="p">())</span><span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="n">L</span> <span class="n">l</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">v</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span>
</span><span class='line'>      <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">x</span><span class="o">=</span><span class="p">{</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">};</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">k</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">k</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="n">k</span><span class="o">!=</span><span class="n">i</span><span class="o">&amp;&amp;</span><span class="n">k</span><span class="o">!=</span><span class="n">j</span><span class="o">&amp;&amp;</span><span class="n">intersectLP</span><span class="p">(</span><span class="n">l</span><span class="p">,</span><span class="n">v</span><span class="p">[</span><span class="n">k</span><span class="p">]))</span><span class="n">x</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">a</span><span class="o">&lt;</span><span class="n">x</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">a</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">b</span><span class="o">=</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">b</span><span class="o">&lt;</span><span class="n">x</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">b</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">n</span><span class="o">=</span><span class="n">b</span><span class="o">-</span><span class="n">a</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>          <span class="n">r</span><span class="o">=</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="n">pow_binary_mod</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">M</span><span class="p">))</span><span class="o">%</span><span class="n">M</span><span class="p">;</span>
</span><span class='line'>          <span class="n">se</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="n">a</span><span class="p">],</span><span class="n">x</span><span class="p">[</span><span class="n">b</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,((</span><span class="n">r</span><span class="o">-</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">M</span><span class="o">+</span><span class="n">M</span><span class="p">)</span><span class="o">%</span><span class="n">M</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>インライン化</h2>

<ul>
<li>関数をインライン化。</li>
<li><a href="http://arc082.contest.atcoder.jp/submissions/1566719">http://arc082.contest.atcoder.jp/submissions/1566719</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;complex&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="kt">double</span> <span class="n">EPS</span> <span class="o">=</span> <span class="mf">1e-12</span><span class="p">;</span>
</span><span class='line'><span class="k">typedef</span> <span class="n">complex</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span> <span class="n">P</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">long</span> <span class="kt">long</span> <span class="nf">pow_binary_mod</span><span class="p">(</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">x</span><span class="p">,</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">y</span><span class="p">,</span><span class="kt">long</span> <span class="kt">long</span> <span class="n">M</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">long</span> <span class="kt">long</span> <span class="n">z</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(;</span><span class="n">y</span><span class="p">;</span><span class="n">y</span><span class="o">&gt;&gt;=</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">((</span><span class="n">y</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">)</span><span class="o">!=</span><span class="mi">0</span><span class="p">)</span><span class="n">z</span><span class="o">=</span><span class="n">z</span><span class="o">*</span><span class="n">x</span><span class="o">%</span><span class="n">M</span><span class="p">;</span>
</span><span class='line'>      <span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="o">*</span><span class="n">x</span><span class="o">%</span><span class="n">M</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">z</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">M</span><span class="o">=</span><span class="mi">998244353</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">N</span><span class="p">,</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">;</span>
</span><span class='line'>  <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="n">P</span><span class="o">&gt;</span><span class="n">v</span><span class="p">(</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">r</span><span class="o">=</span><span class="n">pow_binary_mod</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">N</span><span class="p">,</span><span class="n">M</span><span class="p">);</span>
</span><span class='line'>  <span class="n">set</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span><span class="kt">int</span><span class="o">&gt;&gt;</span><span class="n">se</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">x</span><span class="p">,</span><span class="o">&amp;</span><span class="n">y</span><span class="p">),</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="p">{(</span><span class="kt">double</span><span class="p">)</span><span class="n">x</span><span class="p">,(</span><span class="kt">double</span><span class="p">)</span><span class="n">y</span><span class="p">};</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">se</span><span class="p">.</span><span class="n">find</span><span class="p">({</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">})</span><span class="o">!=</span><span class="n">se</span><span class="p">.</span><span class="n">end</span><span class="p">())</span><span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">x</span><span class="o">=</span><span class="p">{</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">};</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span><span class="o">=</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">k</span><span class="o">&lt;</span><span class="n">N</span><span class="p">;</span><span class="n">k</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="n">abs</span><span class="p">(</span><span class="n">imag</span><span class="p">(</span><span class="n">conj</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">-</span><span class="n">v</span><span class="p">[</span><span class="n">k</span><span class="p">])</span><span class="o">*</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">-</span><span class="n">v</span><span class="p">[</span><span class="n">k</span><span class="p">])))</span><span class="o">&lt;</span><span class="mf">1e-12</span><span class="p">)</span><span class="n">x</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">k</span><span class="p">);</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">a</span><span class="o">&lt;</span><span class="n">x</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">a</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">b</span><span class="o">=</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="n">b</span><span class="o">&lt;</span><span class="n">x</span><span class="p">.</span><span class="n">size</span><span class="p">();</span><span class="n">b</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>          <span class="n">r</span><span class="o">=</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="n">pow_binary_mod</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">b</span><span class="o">+~</span><span class="n">a</span><span class="p">,</span><span class="n">M</span><span class="p">))</span><span class="o">%</span><span class="n">M</span><span class="p">;</span>
</span><span class='line'>          <span class="n">se</span><span class="p">.</span><span class="n">emplace</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="n">a</span><span class="p">],</span><span class="n">x</span><span class="p">[</span><span class="n">b</span><span class="p">]);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,((</span><span class="n">r</span><span class="o">-</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="n">M</span><span class="o">+</span><span class="n">M</span><span class="p">)</span><span class="o">%</span><span class="n">M</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ruby</h2>

<ul>
<li>ここまで最適化すればRubyに移植可能になる。</li>
<li><a href="http://arc082.contest.atcoder.jp/submissions/1567250">http://arc082.contest.atcoder.jp/submissions/1567250</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/ruby</span>
</span><span class='line'><span class="n">M</span><span class="o">=</span><span class="mi">998244353</span>
</span><span class='line'><span class="n">N</span><span class="o">=</span><span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="n">v</span><span class="o">=</span><span class="vg">$&lt;</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span><span class="no">Complex</span><span class="p">(</span><span class="o">*</span><span class="n">e</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_i</span><span class="p">))}</span>
</span><span class='line'><span class="n">h</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">r</span><span class="o">=</span><span class="mi">2</span><span class="o">**</span><span class="n">N</span><span class="o">%</span><span class="n">M</span><span class="o">-</span><span class="n">N</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'><span class="n">N</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="o">|</span><span class="n">i</span><span class="o">|</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">N</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">j</span><span class="o">|</span>
</span><span class='line'>  <span class="n">h</span><span class="o">[</span><span class="n">x</span><span class="o">=[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">]]||</span>
</span><span class='line'>  <span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">N</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="o">|</span><span class="p">((</span><span class="n">v</span><span class="o">[</span><span class="n">j</span><span class="o">]-</span><span class="n">v</span><span class="o">[</span><span class="n">k</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">conj</span><span class="o">*</span><span class="p">(</span><span class="n">v</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="n">v</span><span class="o">[</span><span class="n">k</span><span class="o">]</span><span class="p">))</span><span class="o">.</span><span class="n">imag</span><span class="o">.</span><span class="n">abs</span><span class="o">&lt;</span><span class="mi">1</span><span class="n">e</span><span class="o">-</span><span class="mi">9</span><span class="o">&amp;&amp;</span><span class="n">x</span><span class="o">&lt;&lt;</span><span class="n">k</span><span class="p">}</span><span class="o">&amp;&amp;</span>
</span><span class='line'>  <span class="p">(</span><span class="n">l</span><span class="o">=</span><span class="n">x</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">.</span><span class="n">times</span><span class="p">{</span><span class="o">|</span><span class="n">a</span><span class="o">|</span><span class="p">(</span><span class="n">a</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">l</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">b</span><span class="o">|</span>
</span><span class='line'>      <span class="n">r</span><span class="o">=</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="mi">2</span><span class="o">**</span><span class="p">(</span><span class="n">b</span><span class="o">+~</span><span class="n">a</span><span class="p">))</span><span class="o">%</span><span class="n">M</span>
</span><span class='line'>      <span class="n">h</span><span class="o">[[</span><span class="n">x</span><span class="o">[</span><span class="n">a</span><span class="o">]</span><span class="p">,</span><span class="n">x</span><span class="o">[</span><span class="n">b</span><span class="o">]]]=</span><span class="mi">1</span>
</span><span class='line'>  <span class="p">}}</span>
</span><span class='line'><span class="p">}}</span>
</span><span class='line'><span class="nb">p</span> <span class="n">r</span>
</span></code></pre></td></tr></table></div></figure>


<h2>最終版</h2>

<ul>
<li>ここまで来てようやく解説の意味が理解できた…確かに直線で合ってます…。</li>
<li><a href="http://arc082.contest.atcoder.jp/submissions/1567322">http://arc082.contest.atcoder.jp/submissions/1567322</a></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="c1">#!/usr/bin/ruby</span>
</span><span class='line'><span class="n">M</span><span class="o">=</span><span class="mi">998244353</span>
</span><span class='line'><span class="n">N</span><span class="o">=</span><span class="nb">gets</span><span class="o">.</span><span class="n">to_i</span>
</span><span class='line'><span class="n">v</span><span class="o">=</span><span class="vg">$&lt;</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">e</span><span class="o">|</span><span class="no">Complex</span><span class="p">(</span><span class="o">*</span><span class="n">e</span><span class="o">.</span><span class="n">split</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_i</span><span class="p">))}</span>
</span><span class='line'><span class="n">h</span><span class="o">=</span><span class="p">{}</span>
</span><span class='line'><span class="n">r</span><span class="o">=</span><span class="mi">2</span><span class="o">**</span><span class="n">N</span><span class="o">+~</span><span class="n">N</span>
</span><span class='line'><span class="o">[*</span><span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">N</span><span class="o">].</span><span class="n">combination</span><span class="p">(</span><span class="mi">2</span><span class="p">){</span><span class="o">|</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">|</span>
</span><span class='line'>  <span class="n">h</span><span class="o">[</span><span class="n">x</span><span class="o">=[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="o">]]||</span><span class="p">(</span>
</span><span class='line'>  <span class="p">(</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">N</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">k</span><span class="o">|</span><span class="p">((</span><span class="n">v</span><span class="o">[</span><span class="n">j</span><span class="o">]-</span><span class="n">v</span><span class="o">[</span><span class="n">k</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">conj</span><span class="o">*</span><span class="p">(</span><span class="n">v</span><span class="o">[</span><span class="n">i</span><span class="o">]-</span><span class="n">v</span><span class="o">[</span><span class="n">k</span><span class="o">]</span><span class="p">))</span><span class="o">.</span><span class="n">imag</span><span class="o">.</span><span class="n">abs</span><span class="o">&lt;</span><span class="mi">1</span><span class="n">e</span><span class="o">-</span><span class="mi">9</span><span class="o">&amp;&amp;</span><span class="n">x</span><span class="o">&lt;&lt;</span><span class="n">k</span><span class="p">};</span>
</span><span class='line'>  <span class="n">r</span><span class="o">-=</span><span class="mi">2</span><span class="o">**</span><span class="p">(</span><span class="n">l</span><span class="o">=</span><span class="n">x</span><span class="o">.</span><span class="n">size</span><span class="p">)</span><span class="o">+~</span><span class="n">l</span><span class="p">;</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">combination</span><span class="p">(</span><span class="mi">2</span><span class="p">){</span><span class="o">|</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">|</span><span class="n">h</span><span class="o">[[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">]]=</span><span class="mi">1</span><span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">p</span> <span class="n">r</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[yukicoder] 夏休みの思い出（１）]]></title>
    <link href="http://cielavenir.github.io/blog/2017/07/30/summer-task/"/>
    <updated>2017-07-30T04:00:00+09:00</updated>
    <id>http://cielavenir.github.io/blog/2017/07/30/summer-task</id>
    <content type="html"><![CDATA[<p><a href="https://yukicoder.me/problems/no/550">https://yukicoder.me/problems/no/550</a></p>

<ul>
<li>解と係数の関係から3因数はCの約数である.</li>
<li><a href="https://gist.github.com/pekempey/9eddf9342f65552a92845e035960e8a3">https://gist.github.com/pekempey/9eddf9342f65552a92845e035960e8a3</a> によると約数の個数は最大で103680なので、約数の全列挙をすればこの問題を解くには十分である.</li>
<li><p>なお, Cの最大値は10**18であるが, <del>因数の最大値は10*9であるという制約があるので, Ruby標準ライブラリの素因数分解で問題ない.</del></p>

<ul>
<li><code>-1999999865 999999864000004607 999999866000004473</code>という入力(出力は<code>-1 999999929 999999937</code>)で死ぬので, 素因数列挙だけで解きたい場合はロー法を使いましょう&hellip;</li>
</ul>
</li>
<li><p>Ruby標準ライブラリ(リジャッジでTLEになる予定) <a href="https://yukicoder.me/submissions/192779">https://yukicoder.me/submissions/192779</a></p></li>
<li>ロー法 <a href="https://yukicoder.me/submissions/192783">https://yukicoder.me/submissions/192783</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FXCampusGatePrinterはネットプリントドライバとしても使用できない]]></title>
    <link href="http://cielavenir.github.io/blog/2017/06/04/fxunusable/"/>
    <updated>2017-06-04T15:00:00+09:00</updated>
    <id>http://cielavenir.github.io/blog/2017/06/04/fxunusable</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<ul>
<li>ファミリーマートやローソンの<a href="https://networkprint.ne.jp/">ネットワークプリント</a>はプリンタドライバが存在するが、セブンイレブンの<a href="https://www.printing.ne.jp/">ネットプリント</a>はプリンタドライバが存在しない。</li>
<li><a href="http://www.ecc.u-tokyo.ac.jp/">ECCS</a>2012(ゼロックス)のプリンタドライバはネットプリントドライバとしても使うことが出来た。</li>
<li>現在のECCS2016では業者がリコーになったが、ネットプリントドライバ部分はまだ使えるのではないか？</li>
<li>しかし、使ってみようとすると、<code>接続エラー(320000)</code>となる。</li>
</ul>


<h2>調査</h2>

<ul>
<li>/Library/Printers/FujiXerox/FXCampusGatePrinter/FXCampusGatePrinter.plist から、</li>
<li><code>https://sdb.fujixerox.co.jp:443/CGPPrintPortal/Service.svc</code></li>
<li>という内容が読み取れる。このサーバーは現在停止している。</li>
<li><strong>したがって、ネットプリントドライバとして使うことも現在は不可能である。</strong></li>
</ul>


<h2>結論</h2>

<ul>
<li>個人的には当面はネットワークプリントだけを使うことにします…</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[atcoder] Tournament]]></title>
    <link href="http://cielavenir.github.io/blog/2017/01/22/tournament/"/>
    <updated>2017-01-22T23:10:00+09:00</updated>
    <id>http://cielavenir.github.io/blog/2017/01/22/tournament</id>
    <content type="html"><![CDATA[<p><a href="https://agc009.contest.atcoder.jp/tasks/agc009_b">https://agc009.contest.atcoder.jp/tasks/agc009_b</a></p>

<h2>概要</h2>

<ul>
<li>トーナメント戦を行ったところ、1番の選手が優勝した。</li>
<li>他の選手について、誰に負けたのかが与えられるので、条件をみたすようなトーナメント表の深さの最低値を求めよ。</li>
</ul>


<h2>考察</h2>

<ul>
<li>ある選手がどの選手を倒したかのグラフを作成し、1番の選手から再帰。</li>
<li>倒した選手(N人)のそれぞれについてトーナメント表の深さを求めようとする(倒した選手がいなければ0)。</li>
<li>深さを降順にソートし、これらに1からNまでの数値を割り当てて、足す。</li>
<li>足した後の配列の最大値が答えである。</li>
</ul>


<h2>再帰の深さ</h2>

<ul>
<li>単純に実装すると、最悪10万回の再帰が必要になり、スタックオーバーフローになるおそれがある。</li>
<li>今回、C++は <strong>偶然</strong> 大丈夫であったが、RubyやPythonだと不可であった。

<ul>
<li>スタック拡張テクを使っても依然として通らない。</li>
</ul>
</li>
<li>今回は場当たり的(テストケース依存)な対応になるが、N/2番の選手から一旦再帰しておくことで再帰の深さをある程度減らすことができる。

<ul>
<li>この状態でもスタック拡張テクは依然として必要である。</li>
</ul>
</li>
</ul>


<h2>解答例</h2>

<ul>
<li>C++11

<ul>
<li><a href="http://agc009.contest.atcoder.jp/submissions/1077298">http://agc009.contest.atcoder.jp/submissions/1077298</a></li>
</ul>
</li>
<li>Ruby

<ul>
<li><a href="http://agc009.contest.atcoder.jp/submissions/1076373">http://agc009.contest.atcoder.jp/submissions/1076373</a></li>
</ul>
</li>
<li>Python

<ul>
<li><a href="http://agc009.contest.atcoder.jp/submissions/1077307">http://agc009.contest.atcoder.jp/submissions/1077307</a></li>
<li>なお、なぜかPyPyでは通らない。</li>
</ul>
</li>
</ul>


<h2>余談</h2>

<ul>
<li>木だから本来メモ化は必要なかった。取り除いたらRubyではおまじない不要になった…

<ul>
<li><a href="http://agc009.contest.atcoder.jp/submissions/1076974">http://agc009.contest.atcoder.jp/submissions/1076974</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[単位取得退学します]]></title>
    <link href="http://cielavenir.github.io/blog/2016/12/10/retrieve/"/>
    <updated>2016-12-10T00:00:00+09:00</updated>
    <id>http://cielavenir.github.io/blog/2016/12/10/retrieve</id>
    <content type="html"><![CDATA[<p>【<a href="http://www.adventar.org/calendars/1388">http://www.adventar.org/calendars/1388</a> の12/10分です】</p>

<h2>高校</h2>

<p>東大はBランクだったが、記念受験とした結果実力を出し切れたらしい。(現役)</p>

<h2>学部</h2>

<p>今の研究室には学部時代の体験ゼミでお世話になった。生物とコンピュータを両方取り扱う分野ということで興味を持った。
学部の研究室は、今の研究室の教授から紹介してもらった。割と良い論文が書けた。</p>

<h2>修士</h2>

<p>割と良い論文が書けた、とあるが、これは学士の水準である。これを修士の基準に持っていくのは不可能であった。
1個目のテーマは論文を書いたが、学士よりも酷い内容だったので捨てた。
最終的なテーマを決めるのには結局2年半かかった(※1留)ということになり、半年で修士論文を書いた。こちらはまあまあの出来だった。</p>

<h2>博士</h2>

<p>博士号取得要件は、論文を査読付き雑誌に掲載することである。
修士論文のテーマでは不可能だった。
結局まともな研究を始めたのは2年秋だった。
博士3年の初めにfastqの話で論文を書いたが、内容に不備があり、修正叶わず投稿には至っていない。
予備審査は通して頂けたが、本当にやる気のある学生なら1ヶ月で仕上げられられる内容の研究しかしていない。
データの不足を痛感しつつも、親の希望により職に就くこととなった。</p>

<hr />

<p>というわけで2017/3を以って単位取得退学となる。まずは3月までに雑誌に投稿できるかが勝負である。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[yukicoder] (^^*)]]></title>
    <link href="http://cielavenir.github.io/blog/2016/12/09/smile/"/>
    <updated>2016-12-09T00:00:00+09:00</updated>
    <id>http://cielavenir.github.io/blog/2016/12/09/smile</id>
    <content type="html"><![CDATA[<p><a href="http://yukicoder.me/problems/no/457">http://yukicoder.me/problems/no/457</a></p>

<h2>概要</h2>

<ul>
<li>間に部分列<code>^^*</code>を含むような(と)の組み合わせの個数を求めよ。

<ul>
<li><code>reverse.tr('()',')(')</code>なる処理を加えれば右向きを別に考えなくて良くなる。</li>
</ul>
</li>
</ul>


<h2>考察</h2>

<h3>O(S<sup>2</sup> logS)</h3>

<ul>
<li>(と)の組み合わせをすべて求めて、それぞれに対し、<code>^^*</code>が含まれることを判定します。</li>
<li>まず<code>^^</code>が含まれる一番左の座標を求めます。

<ul>
<li>その座標までに含まれる<code>^</code>の個数を累積和として持ち、(の座標における累積和+2を2分探索します。</li>
</ul>
</li>
<li>次に、その座標から)の座標までについて、<code>*</code>が含まれるかどうかを2分探索します。</li>
<li>以上により<code>O(S^2 logS)</code>となり、C++では通すことができます。

<ul>
<li>本家解説によると愚直解はTLEらしいですが、2分探索に落とし込んだことが功を奏したのでしょうか。</li>
</ul>
</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">solve</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">s</span><span class="p">,</span><span class="kt">int</span> <span class="n">len</span><span class="p">){</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">al</span><span class="p">;</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">ar</span><span class="p">;</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">ah</span><span class="p">(</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="n">ast</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;(&#39;</span><span class="p">){</span>
</span><span class='line'>          <span class="n">al</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;)&#39;</span><span class="p">){</span>
</span><span class='line'>          <span class="n">ar</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;^&#39;</span><span class="p">){</span>
</span><span class='line'>          <span class="n">ah</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;*&#39;</span><span class="p">){</span>
</span><span class='line'>          <span class="n">ast</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span><span class="n">ah</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+=</span><span class="n">ah</span><span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">ret</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="nl">l</span><span class="p">:</span><span class="n">al</span><span class="p">){</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="nl">r</span><span class="p">:</span><span class="n">ar</span><span class="p">){</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">&gt;=</span><span class="n">r</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">hidx</span><span class="o">=</span><span class="n">distance</span><span class="p">(</span><span class="n">ah</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">ah</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">ah</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">ah</span><span class="p">[</span><span class="n">l</span><span class="p">]</span><span class="o">+</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">hidx</span><span class="o">&gt;=</span><span class="n">r</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span>
</span><span class='line'>          <span class="k">auto</span> <span class="n">st</span><span class="o">=</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">ast</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">ast</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">hidx</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span><span class="n">st</span><span class="o">!=</span><span class="n">ast</span><span class="p">.</span><span class="n">end</span><span class="p">()</span><span class="o">&amp;&amp;*</span><span class="n">st</span><span class="o">&lt;</span><span class="n">r</span><span class="p">){</span>
</span><span class='line'>              <span class="n">ret</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">char</span> <span class="n">s</span><span class="p">[</span><span class="mi">10001</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>  <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%s&quot;</span><span class="p">,</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span><span class="o">=</span><span class="n">strlen</span><span class="p">(</span><span class="n">s</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span><span class="n">solve</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">len</span><span class="p">));</span>
</span><span class='line'>  <span class="n">reverse</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">s</span><span class="o">+</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;(&#39;</span><span class="p">)</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="sc">&#39;)&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">==</span><span class="sc">&#39;)&#39;</span><span class="p">)</span><span class="n">s</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">=</span><span class="sc">&#39;(&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">solve</span><span class="p">(</span><span class="n">s</span><span class="p">,</span><span class="n">len</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>O(SlogS)</h3>

<ul>
<li>以下、最も重いループの計算量を減らすことを考えます。</li>
<li>まず、rは単調増加であるため、<code>st!=ast.end()&amp;&amp;*st&lt;r</code>が一度真になれば、そのループの中では常に真になります。よってキャッシュすることができます。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="nl">l</span><span class="p">:</span><span class="n">al</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">f</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="nl">r</span><span class="p">:</span><span class="n">ar</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">l</span><span class="o">&gt;=</span><span class="n">r</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="p">){</span><span class="n">ret</span><span class="o">++</span><span class="p">;</span><span class="k">continue</span><span class="p">;}</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">hidx</span><span class="o">=</span><span class="n">distance</span><span class="p">(</span><span class="n">ah</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">ah</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">ah</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">ah</span><span class="p">[</span><span class="n">l</span><span class="p">]</span><span class="o">+</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">hidx</span><span class="o">&gt;=</span><span class="n">r</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="k">auto</span> <span class="n">st</span><span class="o">=</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">ast</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">ast</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">hidx</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">st</span><span class="o">!=</span><span class="n">ast</span><span class="p">.</span><span class="n">end</span><span class="p">()</span><span class="o">&amp;&amp;*</span><span class="n">st</span><span class="o">&lt;</span><span class="n">r</span><span class="p">){</span>
</span><span class='line'>          <span class="n">ret</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="n">f</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>さらに、hidxおよびstはrに依存しないため、ループrの外で計算しておいて問題ないことがわかります。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="nl">l</span><span class="p">:</span><span class="n">al</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// if hidx&gt;=r, l&gt;=r is assured because hidx&gt;l.</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">hidx</span><span class="o">=</span><span class="n">distance</span><span class="p">(</span><span class="n">ah</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">ah</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">ah</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">ah</span><span class="p">[</span><span class="n">l</span><span class="p">]</span><span class="o">+</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>  <span class="c1">// if hidx==ah.size(), st==ast.end() is assured because hidx==len.</span>
</span><span class='line'>  <span class="k">auto</span> <span class="n">st</span><span class="o">=</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">ast</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">ast</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">hidx</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">bool</span> <span class="n">f</span><span class="o">=</span><span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="nl">r</span><span class="p">:</span><span class="n">ar</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="p">){</span><span class="n">ret</span><span class="o">++</span><span class="p">;</span><span class="k">continue</span><span class="p">;}</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">st</span><span class="o">!=</span><span class="n">ast</span><span class="p">.</span><span class="n">end</span><span class="p">()</span><span class="o">&amp;&amp;*</span><span class="n">st</span><span class="o">&lt;</span><span class="n">r</span><span class="p">){</span>
</span><span class='line'>          <span class="n">ret</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>          <span class="n">f</span><span class="o">=</span><span class="nb">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>arのループは<code>FF...FFTT...TT</code>のようになるので、このTになる場所を2分探索できます。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="nl">l</span><span class="p">:</span><span class="n">al</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">hidx</span><span class="o">=</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">ah</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">ah</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">ah</span><span class="p">[</span><span class="n">l</span><span class="p">]</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="n">ah</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span><span class='line'>  <span class="k">auto</span> <span class="n">st</span><span class="o">=</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">ast</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">ast</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">hidx</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">st</span><span class="o">==</span><span class="n">ast</span><span class="p">.</span><span class="n">end</span><span class="p">())</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ret</span><span class="o">+=</span><span class="n">ar</span><span class="p">.</span><span class="n">end</span><span class="p">()</span><span class="o">-</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">ar</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span><span class="n">ar</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="o">*</span><span class="n">st</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>最後に、範囲を狭めるためのtweakを入れます(必要ではありませんが…)。</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">auto</span> <span class="n">ist</span><span class="o">=</span><span class="n">ast</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span><span class='line'><span class="k">auto</span> <span class="n">ir</span><span class="o">=</span><span class="n">ar</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span><span class='line'><span class="k">for</span><span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="nl">l</span><span class="p">:</span><span class="n">al</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">hidx</span><span class="o">=</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">ah</span><span class="p">.</span><span class="n">begin</span><span class="p">()</span><span class="o">+</span><span class="n">l</span><span class="p">,</span><span class="n">ah</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">ah</span><span class="p">[</span><span class="n">l</span><span class="p">]</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">-</span><span class="n">ah</span><span class="p">.</span><span class="n">begin</span><span class="p">();</span>
</span><span class='line'>  <span class="n">ist</span><span class="o">=</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">ist</span><span class="p">,</span><span class="n">ast</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="n">hidx</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">ist</span><span class="o">==</span><span class="n">ast</span><span class="p">.</span><span class="n">end</span><span class="p">())</span><span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ret</span><span class="o">+=</span><span class="n">ar</span><span class="p">.</span><span class="n">end</span><span class="p">()</span><span class="o">-</span><span class="p">(</span><span class="n">ir</span><span class="o">=</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">ir</span><span class="p">,</span><span class="n">ar</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span><span class="o">*</span><span class="n">ist</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>以上で<code>O(SlogS)</code>となり、Rubyでも通すことができます。

<ul>
<li>C++ <a href="http://yukicoder.me/submissions/136737">http://yukicoder.me/submissions/136737</a></li>
<li>Ruby <a href="http://yukicoder.me/submissions/136749">http://yukicoder.me/submissions/136749</a></li>
</ul>
</li>
</ul>


<h3>O(S)</h3>

<ul>
<li>動的計画法により<code>O(S)</code>に落とせるようです。コードがより短い実装はそうなっているものが多いようです。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[atcoder] 木の問題]]></title>
    <link href="http://cielavenir.github.io/blog/2016/11/30/problem-on-tree/"/>
    <updated>2016-11-30T15:07:16+09:00</updated>
    <id>http://cielavenir.github.io/blog/2016/11/30/problem-on-tree</id>
    <content type="html"><![CDATA[<p><a href="https://cf16-relay-open.contest.atcoder.jp/tasks/relay_k">https://cf16-relay-open.contest.atcoder.jp/tasks/relay_k</a></p>

<h2>概要</h2>

<ul>
<li>問題文がそれなりに読みにくい。</li>
<li>いわんとしていることは、選んだ頂点については2回通ってはならないということである。この状況で選ぶ頂点の数を最大化すれば良い。</li>
<li>答えは木の直径以上になることは容易に想像がつく。</li>
</ul>


<h2>考察</h2>

<ul>
<li>枝分かれする(辺が3本以上ある)頂点については、つながっている辺の先にある葉(辺が1本ある頂点)を選んだほうが良いのは明らかである。</li>
<li>問題は辺がちょうど2本ある頂点であるが、木の直径上にある頂点を選ぶ方法でサンプルは通る。</li>
<li>しかし、たとえばこういう入力の場合、sub-optimalになってしまう。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>o-o-o-o-o
</span><span class='line'>    |
</span><span class='line'>  o-o-o
</span><span class='line'>    |
</span><span class='line'>  o-o-o
</span><span class='line'>    |
</span><span class='line'>  o-o-o
</span><span class='line'>    |
</span><span class='line'>    o</span></code></pre></td></tr></table></div></figure>


<ul>
<li>対処するには、木の直径を求めるコードを変形し、頂点の重みを、辺が2本ある場合のみ1に、それ以外は0とすれば良い。</li>
</ul>


<h2>解答例</h2>

<ul>
<li>C++14

<ul>
<li>Based on <a href="http://www.prefield.com/algorithm/graph/tree_diameter.html">Spaghetti Source</a></li>
<li><a href="https://cf16-relay-open.contest.atcoder.jp/submissions/1003862">https://cf16-relay-open.contest.atcoder.jp/submissions/1003862</a></li>
</ul>
</li>
<li>Ruby

<ul>
<li><a href="https://cf16-relay-open.contest.atcoder.jp/submissions/1003865">https://cf16-relay-open.contest.atcoder.jp/submissions/1003865</a></li>
</ul>
</li>
</ul>


<h2>感想</h2>

<ul>
<li>これを時間内に思いつくのはやはりすごいと思いました…</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code Festival 2016 参加記]]></title>
    <link href="http://cielavenir.github.io/blog/2016/11/28/code-festival-2016/"/>
    <updated>2016-11-28T22:06:30+09:00</updated>
    <id>http://cielavenir.github.io/blog/2016/11/28/code-festival-2016</id>
    <content type="html"><![CDATA[<p>参加記です。</p>

<h2>予選</h2>

<ul>
<li>A: C早解きでぎりぎり通過。ただし、剰余のあたりバグらせてしまい若干危うかった。</li>
<li>B: 本番の時間では参加しませんでしたが、自力で解けたのはBまででした。</li>
<li>C: (同上)、自力で解けたのはAだけという悲惨さ。</li>
<li>予選Aで通って本当に良かった…。</li>
</ul>


<h2>11/8</h2>

<ul>
<li>博士予備審査を通す。まあ、<a href="http://cielavenir.github.io/blog/2016/12/10/retrieve/">退学</a>は予定していましたが、予備審査は通したかったので。</li>
<li>ちなみに通っていなければ <strong>本選辞退案件</strong> でした…</li>
</ul>


<h2>水曜日〜金曜日</h2>

<ul>
<li>この時期にバス旅行とか色々とあれ。</li>
<li>本選ページを見て、パーカーボーダーに愕然とする。ABCD+E部分点が必要。</li>
<li>実は一回スーツケース(含PC)をホテルに忘れかけそうになった(これも <strong>本選辞退案件</strong> )</li>
</ul>


<h2>1日目</h2>

<h3>朝</h3>

<ul>
<li>9:50起床、 <strong>Code Festivalの伝統的正装とされるパーカー</strong> を来て出発。汐留のサブウェイで食べようと思ったけど中止。結局昼食は歌舞伎揚げで済ませた。</li>
<li>スタンプラリー、今年はないみたい。スケジュールを巻かなくてよいので楽。</li>
<li>席、学年順なんですか？老人を固めるのはやめてくだされ。</li>
</ul>


<h3>本選</h3>

<table>
<thead>
<tr>
<th style="text-align:left;">時間</th>
<th style="text-align:left;">言語</th>
<th style="text-align:left;">問題(A-J)</th>
<th style="text-align:left;">コメント</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">0:02</td>
<td style="text-align:left;">Ruby</td>
<td style="text-align:left;">A</td>
<td style="text-align:left;">WA</td>
</tr>
<tr>
<td style="text-align:left;">0:07</td>
<td style="text-align:left;">Ruby</td>
<td style="text-align:left;">B</td>
<td style="text-align:left;">順番に足していって後で1問だけ消せばいいでしょ <strong>AC</strong></td>
</tr>
<tr>
<td style="text-align:left;">0:12</td>
<td style="text-align:left;">Ruby</td>
<td style="text-align:left;">A</td>
<td style="text-align:left;">H,Wを逆に取るくそミスに気付く。 <strong>AC</strong></td>
</tr>
<tr>
<td style="text-align:left;">0:15</td>
<td style="text-align:left;"></td>
<td style="text-align:left;">D</td>
<td style="text-align:left;"><a href="https://github.com/cielavenir/procon/blob/f17167643ecb6360c986a9ffed37b1524b6683b8/atcoder/tyama_atcodercodefestival2016finalD_TLE.cpp">最大マッチング</a>だと思ったけど、制約がでかすぎるなぁ。</td>
</tr>
<tr>
<td style="text-align:left;">0:30</td>
<td style="text-align:left;">C++</td>
<td style="text-align:left;">C</td>
<td style="text-align:left;">言語についてUnion-Findして根の数が1ならいいよね <strong>AC</strong></td>
</tr>
<tr>
<td style="text-align:left;">0:45</td>
<td style="text-align:left;">C++</td>
<td style="text-align:left;">E</td>
<td style="text-align:left;">個数と速度について幅優先探索。TLE</td>
</tr>
<tr>
<td style="text-align:left;">0:58</td>
<td style="text-align:left;">C++</td>
<td style="text-align:left;">E</td>
<td style="text-align:left;">色々手を尽くすも依然TLE</td>
</tr>
<tr>
<td style="text-align:left;">1:02</td>
<td style="text-align:left;">C++</td>
<td style="text-align:left;">E</td>
<td style="text-align:left;">枝刈りの仕方を改善。<strong>RE</strong> (部分点制約に合わないなら切腹する意味なのでREでOK)</td>
</tr>
<tr>
<td style="text-align:left;">1:30</td>
<td style="text-align:left;">Ruby</td>
<td style="text-align:left;">D</td>
<td style="text-align:left;">全部のチーを取ってから残りのカードでできるだけポンする。多分嘘解法。<strong>AC</strong> <strong>パーカー確定</strong> 。軽食を取る。</td>
</tr>
<tr>
<td style="text-align:left;">2:45</td>
<td style="text-align:left;">C++</td>
<td style="text-align:left;">E</td>
<td style="text-align:left;">unordered_mapいらなかったんや…少しつらい^^;;</td>
</tr>
<tr>
<td style="text-align:left;">3:00</td>
<td style="text-align:left;"></td>
<td style="text-align:left;"></td>
<td style="text-align:left;">あとは座るだけ。84位。お疲れ様でした。なおパーカーボーダーは124位。少し減りましたねぇ</td>
</tr>
</tbody>
</table>


<ul>
<li>D問題、嘘解法だと思っていたのが想定解法だったらしく、びっくり。今年も運が良かった。

<ul>
<li>UTPCの<a href="http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=2102">ラミー</a>の<a href="http://judge.u-aizu.ac.jp/onlinejudge/review.jsp?rid=497566">経験</a>が役に立った？</li>
</ul>
</li>
<li><font color="orange">帰宅してから思ったけどDは一般マッチングであって二部グラフじゃないですよね…</font></li>
</ul>


<h3>夕方</h3>

<ul>
<li>tourist氏トークライブ。

<ul>
<li>everything <strong>except gifted brain</strong></li>
<li><a href="http://www.farmanager.com/">FAR Manager</a> (そこか)</li>
</ul>
</li>
<li>体力測定。11ptだった。だめすぎ。</li>
<li>ペアプロライブ。二人ゲームは難しいです…。でもコードは短いという…

<ul>
<li><font color="orange"><a href="http://cf16-pair.contest.atcoder.jp/">http://cf16-pair.contest.atcoder.jp/</a> 、公開になりませんか?</font></li>
</ul>
</li>
<li>エキシビション、さらに難易度上がってませんか。

<ul>
<li>sevenkplus氏が、tourist氏のPCのFAR Managerの使い方がわからず苦戦していた模様(そこか)</li>
</ul>
</li>
<li>リレー顔合わせ。自己紹介(英語)がぐだってしまった。

<ul>
<li><font color="orange">ショートコードランキングについて。丸写しはまれですが、 <strong>写経はそれなりにしてます。すみません。</strong></font></li>
</ul>
</li>
</ul>


<h3>夜</h3>

<ul>
<li>起床フェーズがやばいことは明白なのに今年は宿泊なしですよ？酷いよ？</li>
<li>特に理由もなくセガ神楽坂に寄ってから帰宅した。</li>
</ul>


<h2>2日目</h2>

<h3>朝</h3>

<ul>
<li>7:50起床。 <strong>コンテストはACだけど開会式はTLE</strong> 。</li>
</ul>


<h3>Elimination Tournament</h3>

<h4>Round1 (group19)</h4>

<table>
<thead>
<tr>
<th style="text-align:left;">時間</th>
<th style="text-align:left;">言語</th>
<th style="text-align:left;">問題</th>
<th style="text-align:left;">コメント</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">0:11</td>
<td style="text-align:left;">Ruby</td>
<td style="text-align:left;">B</td>
<td style="text-align:left;">メモ化再帰。WA</td>
</tr>
<tr>
<td style="text-align:left;">0:26</td>
<td style="text-align:left;">C++</td>
<td style="text-align:left;">A</td>
<td style="text-align:left;">2頂点からPrim法。WA</td>
</tr>
<tr>
<td style="text-align:left;">0:28</td>
<td style="text-align:left;">Ruby</td>
<td style="text-align:left;">B</td>
<td style="text-align:left;">off-by-oneエラーだった。 <strong>400点</strong> 1位通過、Round2進出</td>
</tr>
</tbody>
</table>


<ul>
<li><font color="orange">A問題、後で確認したら、long long案件だった。これは酷い。</font></li>
</ul>


<h4>Round2 (group10)</h4>

<table>
<thead>
<tr>
<th style="text-align:left;">時間</th>
<th style="text-align:left;">言語</th>
<th style="text-align:left;">問題</th>
<th style="text-align:left;">コメント</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">0:01</td>
<td style="text-align:left;">Ruby</td>
<td style="text-align:left;">A</td>
<td style="text-align:left;">自明解。 <strong>200点</strong></td>
</tr>
<tr>
<td style="text-align:left;">0:09</td>
<td style="text-align:left;">Ruby</td>
<td style="text-align:left;">B</td>
<td style="text-align:left;">愚直解。 <strong>200点</strong></td>
</tr>
<tr>
<td style="text-align:left;">0:30</td>
<td style="text-align:left;"></td>
<td style="text-align:left;"></td>
<td style="text-align:left;">かろうじて逃げ切れました。4位通過、Round3進出</td>
</tr>
</tbody>
</table>


<h4>Round3 (group5)</h4>

<table>
<thead>
<tr>
<th style="text-align:left;">時間</th>
<th style="text-align:left;">言語</th>
<th style="text-align:left;">問題</th>
<th style="text-align:left;">コメント</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">0:08</td>
<td style="text-align:left;">Ruby</td>
<td style="text-align:left;">A</td>
<td style="text-align:left;">最大K個を拾う。当然誤解法。</td>
</tr>
<tr>
<td style="text-align:left;">0:12</td>
<td style="text-align:left;">Ruby</td>
<td style="text-align:left;">B</td>
<td style="text-align:left;"><code>N-S.index('m')</code>個の中の最大を取って、その最小では？ → WA</td>
</tr>
<tr>
<td style="text-align:left;">0:30</td>
<td style="text-align:left;"></td>
<td style="text-align:left;"></td>
<td style="text-align:left;">0点。くそすぎました…</td>
</tr>
</tbody>
</table>


<p>まあ、下以外のステッカー、計3枚もらえてうれしかったので、その場で貼ってしまいました。</p>

<h3>昼</h3>

<ul>
<li>知床鮨。</li>
<li>LT。きゅうりさんの擬人化の <em>よさみ</em> 。</li>
<li>休憩時間にちょろっと退出しUFOキャッチャー。まあ、1回のトライではタオルはおろか何も取れるはずはない。ご苦労様でした。</li>
<li>りんごさんの挑戦状。おもしろかった。</li>
</ul>


<h3>早解きリレー</h3>

<ul>
<li>W4yneb0t氏のチームでした。</li>
<li>Tシャツの色、不幸にも去年と同じ色…。あの色を2着というのは厳しい…。</li>
<li>ゼッケン。アルファベットにしてくれと去年要望出したのにどうしたー。</li>
<li>順位順でGを担当。思いついた解法がどう考えてもTLEだったが、状態を配列に取っておけばいいことを教えてもらった。実装は一発ACだった。</li>
<li>9完でFinish。

<ul>
<li>役に立てなくてすみません。 <strong>W4yneb0tさん、Grand Final優勝おめでとうございます。</strong></li>
</ul>
</li>
<li>Kは、最長パスの接点2の数+葉の数が答えらしい。

<ul>
<li><font color="orange">実際には</font><a href="http://cielavenir.github.io/blog/2016/11/30/problem-on-tree/">少し違った。</a></li>
</ul>
</li>
</ul>


<h3>帰路</h3>

<ul>
<li>他の人の実装見たりしていた。</li>
</ul>


<h2>まとめ</h2>

<ul>
<li>ゆっくり楽しめました。ただ、ゆっくりすぎて太鼓やらなかった(でもまあ太鼓はメイン機種じゃないのでいいか…)</li>
<li>お土産少なくないですか。パーカーあるからいいですが…</li>
</ul>


<h2>お土産</h2>

<ul>
<li>パーカー

<ul>
<li>白だと汚れるので家宝として封印かなぁ。</li>
</ul>
</li>
<li>本選Tシャツ、リレーTシャツ(カーネーション?)</li>
<li>ステッカー(本選、トーナメント3枚)</li>
<li>トートバッグ

<ul>
<li>今回も手提げショルダー両用</li>
</ul>
</li>
<li>ボールペン、ノート</li>
</ul>

]]></content>
  </entry>
  
</feed>
